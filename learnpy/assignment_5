Dan

This week's class is a review class.  There is a single video where I review the content from classes 1 through 4.  Additionally, there are a couple of extended exercises.

Finally, since we are midway through the course, I have a couple of course feedback questions.




Course Feedback Questions:

1. What one thing needs most improved in the course?

2. Has the course been valuable to you?





Videos

     I. Class Review (weeks 1 - 4)
        video https://vimeo.com/121951502
        Length is 16 minutesâ€‹





Exercises

In these two exercises, I am going to use the following diagram and CDP data:
   Diagram
   CDP data

Disclaimer: the CDP data is from a test switch and a test router. I have manually modified this data to be consistent with the above diagram.  


Reference code for these exercises is posted at:
https://github.com/ktbyers/pynet/tree/master/learnpy_ecourse/class5




1. Parse the CDP data (see link above) to obtain the following information: hostname, ip, model, vendor, and device_type (device_type will be either 'router', 'switch', or 'unknown').

From this data create a dictionary of all the network devices.

The network_devices dictionary should have the following format:

network_devices = {
     'SW1': { 'ip': '10.1.1.22', 'model': 'WS-C2950-24', 'vendor': 'cisco', 'device_type': 'switch' },
     'R1': { 'ip': '10.1.1.1', 'model': '881', 'vendor': 'Cisco', 'device_type': 'router' },
      ...
     'R5': { 'ip': '10.1.1.1', 'model': '881', 'vendor': 'Cisco', 'device_type': 'router' },
 }

Note, this data structure is a dictionary that contains additional dictionaries.  The key to the outer dictionary is a hostname and the data corresponding to this key is another dictionary.  For example, for 'R1':

>>> network_devices['R1']
{'ip': '10.1.1.1', 'model': '881', 'vendor': 'Cisco', 'device_type': 'router'}

You can access a given attribute in the inner dictionary as follows:
>>> a_dict['R1']['ip']
'10.1.1.1'


If this is confusing, you might want to experiment with it in the Python shell:

##### Python Shell - experimenting with dictionary of dictionaries #####

# Initialize network_devices to be a blank dictionary
>>> network_devices = {}

# Assign the key 'R1' to network_devices using a value of a blank dictionary (in other words, I am adding a key:value pair to network_devices where the key is 'R1' and the value is {} )
>>> network_devices['R1'] = {}

# Look at network_devices at this point
>>> network_devices
{'R1': {}}

# Add the 'ip' and 'vendor' fields to the inner dictionary
>>> network_devices['R1']['ip'] = '10.1.1.1'
>>> network_devices['R1']['vendor'] = 'Cisco'
>>> network_devices
{'R1': {'ip': '10.1.1.1', 'vendor': 'Cisco'}}

##### Python Shell - experimenting end #####


For the output to this exercise, print network_devices to standard output.  Your output should look similar to the following (six network devices with their associated attributes).  

{'R1': {'device_type': 'Router',
        'ip': '10.1.1.1',
        'model': '881',
        'vendor': 'Cisco'},
 'R2': {'device_type': 'Router',
        'ip': '10.1.1.2',
        'model': '881',
        'vendor': 'Cisco'},
 'R3': {'device_type': 'Router',
        'ip': '10.1.1.3',
        'model': '881',
        'vendor': 'Cisco'},
 'R4': {'device_type': 'Router',
        'ip': '10.1.1.4',
        'model': '881',
        'vendor': 'Cisco'},
 'R5': {'device_type': 'Router',
        'ip': '10.1.1.5',
        'model': '881',
        'vendor': 'Cisco'},
 'SW1': {'device_type': 'Switch',
         'ip': '10.1.1.22',
         'model': 'WS-C2950-24',
         'vendor': 'cisco'}}



2. Create a second program that expands upon the program from exercise 1.

This program will keep track of which network devices are physically adjacent to each other (physically connected to each other).  

You will accomplish this by adding a new field (adjacent_devices) to your network_devices inner dictionary.  adjacent_devices will be a list of hostnames that a given network device is physically connected to.  

For example, the dictionary entries for 'R1' and 'SW1' should look as follows:

'R1': {'IP': '10.1.1.1',
        'adjacent_devices': ['SW1'],
        'device_type': 'Router',
        'model': '881',
        'vendor': 'Cisco'},

 'SW1': {'IP': '10.1.1.22',
         'adjacent_devices': ['R1', 'R2', 'R3', 'R4', 'R5'],
         'device_type': 'Switch',
         'model': 'WS-C2950-24',
         'vendor': 'cisco'},



For the output to this exercise, print network_devices to standard output.  Your output should look similar to the following (six network devices with their associated attributes including 'adjacent_devices').

{'R1': {'IP': '10.1.1.1',
        'adjacent_devices': ['SW1'],
        'device_type': 'Router',
        'model': '881',
        'vendor': 'Cisco'},
 'R2': {'IP': '10.1.1.2',
        'adjacent_devices': ['SW1'],
        'device_type': 'Router',
        'model': '881',
        'vendor': 'Cisco'},
 'R3': {'IP': '10.1.1.3',
        'adjacent_devices': ['SW1'],
        'device_type': 'Router',
        'model': '881',
        'vendor': 'Cisco'},
 'R4': {'IP': '10.1.1.4',
        'adjacent_devices': ['SW1'],
        'device_type': 'Router',
        'model': '881',
        'vendor': 'Cisco'},
 'R5': {'IP': '10.1.1.5',
        'adjacent_devices': ['SW1'],
        'device_type': 'Router',
        'model': '881',
        'vendor': 'Cisco'},
 'SW1': {'IP': '10.1.1.22',
         'adjacent_devices': ['R1', 'R2', 'R3', 'R4', 'R5'],
         'device_type': 'Switch',
         'model': 'WS-C2950-24',
         'vendor': 'cisco'}}







Video Archive

Week1
Introduction and Some Questions
What is the Nature of Python  
Interpreter Shell, Variables, and Assignment  
Strings

Week2
Introduction
Print and raw_input
Numbers 
Lists and Tuples 
Booleans

Week3
Introduction
If Conditionals
For Loops
Passing Arguments into a Script

Week4
Introduction
While Loops
Dictionaries
Exceptions









Kirk Byers
https://pynet.twb-tech.com
Twitter: @kirkbyers
